"""
-------------------------------------------------------
Queue Class
-------------------------------------------------------
Author:  Ryan Chisholm
__updated__ = "2023-02-01"
-------------------------------------------------------
"""
from copy import deepcopy


class Queue:

    def __init__(self):
        """
        -------------------------------------------------------
        Initializes an empty queue. Data is stored in a Python list.
        Use: queue = Queue()
        -------------------------------------------------------
        Returns:
            a new Queue object (Queue)
        -------------------------------------------------------
        """
        self._values = [] #create queue object

    def is_empty(self):
        """
        -------------------------------------------------------
        Determines if the queue is empty.
        Use: b = queue.is_empty()
        -------------------------------------------------------
        Returns:
            True if queue is empty, False otherwise.
        -------------------------------------------------------
        """
        return len(self._values) == 0

    def is_full(self):
        """
        -------------------------------------------------------
        Determines if the queue is full. (Given the expandable nature
        of the Python list _values, the queue is never full.)
        Use: b = queue.is_full()
        -------------------------------------------------------
        Returns:
            True if queue is full, False otherwise.
        -------------------------------------------------------
        """
        return False #this type of queue can never be full due to the expandable nature of a python list

    def __len__(self):
        """
        -------------------------------------------------------
        Returns the length of the queue.
        Use: n = len(queue)
        -------------------------------------------------------
        Returns:
            the number of values in queue.
        -------------------------------------------------------
        """
        return len(self._values)

    def insert(self, value):
        """
        -------------------------------------------------------
        Adds a copy of value to the rear of the queue.
        Use: queue.insert(value)
        -------------------------------------------------------
        Parameters:
            value - a data element (?)
        Returns:
            None
        -------------------------------------------------------
        """        
        self._values.append(deepcopy(value))
        
        return
    

    def remove(self):
        """
        -------------------------------------------------------
        Removes and returns value from the queue.
        Use: value = queue.remove()
        -------------------------------------------------------
        Returns:
            value - the value at the front of the queue - the value is
            removed from queue (?)
        -------------------------------------------------------
        """
        assert len(self._values) > 0, "Cannot remove from an empty queue"
        
        _values = self._values
        
        value = _values[0] #value to be removed is first value
        
        for i in range(len(_values)):
            if i < len(_values) - 1:
                _values[i] = _values[i+1] #push each value in queue forward
                
        _values.pop() #remove empty slot at the end
        
        return value
    

    def peek(self):
        """
        -------------------------------------------------------
        Peeks at the front of queue.
        Use: value = queue.peek()
        -------------------------------------------------------
        Returns:
            value - a copy of the value at the front of queue -
            the value is not removed from queue (?)
        -------------------------------------------------------
        """
        assert len(self._values) > 0, "Cannot peek at an empty queue"
        value = deepcopy(self._values[0])
        
        return value
    
    
    
    def __eq__(self, target):
        """
        ----------------
        Determines whether two Queues are equal.
        Values in self and target are compared and if all values are equal
        and in the same order, returns True, otherwise returns False.
        Use: equals = source == target
        ---------------
        Parameters:
            target - a queue (Queue)
        Returns:
            equals - True if source contains the same values
                as target in the same order, otherwise False. (boolean)
        ---------------
        """
        _values = self._values
        equals = False 
        t = []
        j = 0
        i = 0
        
        for value in target: #add to list for easier indexing
            t.append(value)        
        
        if t[j] in _values and len(_values) == len(t): #make sure they have same number of values, can't be equal if values are missing
            while t[j] != _values[i]:
                j += 1 #find value where both are equal, start comparison from there
            
            while t[j] == _values[i] and i < (len(_values) - 1): #run until they are not equal, or reach the end of local queue
                j += 1
                i += 1
                
                if j >= len(t) and i < len(_values): #circular queue, avoid going out of range
                    j = j - len(t)
                    
            if i == (len(_values) - 1): #ending i value is equal to end of queue, meaning the loop went all the way through without finding any unequal values
                equals = True        
            
        return equals
    
    
    def combine(self, source1, source2):
        """
        -------------------------------------------------------
        Combines two source queues into the current target queue.
        When finished, the contents of source1 and source2 are interlaced
        into target and source1 and source2 are empty.
        Order of source values is preserved.
        (iterative algorithm)
        Use: target.combine(source1, source2)
        -------------------------------------------------------
        Parameters:
            source1 - an array-based queue (Queue)
            source2 - an array-based queue (Queue)
        Returns:
            None
        -------------------------------------------------------
        """
        _values = self._values

        n = True
    
        while source1.is_empty() == False and source2.is_empty() == False: #run until either queue is empty
            if n == True:
                self._values.append(source1.remove())
            else:    
                self._values.append(source2.remove())
            
            n = not n
        
        #add spillover of queues into new queue
        if source1.is_empty() == False:
            while source1.is_empty() == False:
                self._values.append(source1.remove())
        
        elif source2.is_empty() == False:
            while source2.is_empty() == False:
                self._values.append(source2.remove())
        
        return
        
        
        
        

    def __iter__(self):
        """
        FOR TESTING ONLY
        -------------------------------------------------------
        Generates a Python iterator. Iterates through the queue
        from front to rear.
        Use: for value in queue:
        -------------------------------------------------------
        Returns:
            value - the next value in the queue (?)
        -------------------------------------------------------
        """
        for value in self._values:
            yield value

